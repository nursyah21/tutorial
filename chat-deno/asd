import { Application, Router } from "https://deno.land/x/oak@v13.2.5/mod.ts";
import { oakCors } from "https://deno.land/x/cors@v1.2.2/mod.ts";
import { connectDb, messageModel } from "./utils/mongodb.ts";
// import { Server } from "npm:socket.io@^4.7.4";
// import { createServer } from "https://deno.land/std@0.130.0/node/net.ts";
import {
  WebSocketClient,
  WebSocketServer,
} from "https://deno.land/x/websocket@v0.1.4/mod.ts";

await connectDb();
console.log("connect db");

const app = new Application({ logErrors: true });
const router = new Router();
// @ts-ignore: adasdd
// const io = new Server(createServer(app));

router.get("/", (context) => {
  context.response.body = "Hello world!";
});

router.get("/all", async (context) => {
  const data = await messageModel.find().select({ message: 1, createdAt: 1 });
  context.response.body = data;
});

// const wss = new WebSocketServer(8080);
// wss.on("connection", function (ws: WebSocketClient) {
//   ws.on("message", function (message: string) {
//     console.log(message);
//     ws.send(message);
//   });
  
// });

// io.on("connection", (client) => {
//   console.log(client)
//   client.on("event", (data) => {
//     console.log(data)
//   });

//   client.on("disconnect", () => {
//     console.log(client, 'disconnect')
//   });
// });

// // @ts-ignore: asdasda
// const handler = io.handler(async (req) => {
//   return await app.handle(req) || new Response(null, { status: 404 });
// });

router.get("/wss", (ctx) => {
  if (!ctx.isUpgradable) {
    ctx.throw(501);
  }
  const ws = ctx.upgrade();
  const r = ctx.request.ip;
  // Define ws callbacks

  ws.onopen = () => console.log(r, "Connection established");
  ws.onclose = () => console.log(r, "Connection closed");
  ws.onmessage = async (m) => {
    ws.send(m.data);
    await messageModel.create({ message: m.data });
  };
});

app.use(oakCors());
app.use(router.routes());
app.use(router.allowedMethods());

app.listen({ port: 8000 });

console.log("server already on port 8000");
